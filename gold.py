#%%
import duckdb

db_path = "dados.duckdb"
chunk_size = 1_000_000  # controle de linhas por faixa

con = duckdb.connect(db_path)
con.execute("PRAGMA threads=4;")  # limitar CPU

# Apaga tabela antiga
con.execute("DROP TABLE IF EXISTS CNPJ_EMPRESAS;")

# Cria tabela vazia com o schema (LIMIT 0)
con.execute("""
CREATE TABLE CNPJ_EMPRESAS AS
SELECT
    e.CNPJ_BASICO || e.CNPJ_ORDEM || e.CNPJ_DV AS CNPJ,
    e.CNPJ_BASICO,
    e.CNPJ_ORDEM,
    e.CNPJ_DV,
    e.NOME_FANTASIA,
    em.RAZAO_SOCIAL_NOME_EMPRESARIAL,
    natju.DESCRICAO_NATUREZA_JURIDICA,
    
    CASE e.SITUACAO_CADASTRAL
        WHEN '01' THEN 'NULA'
        WHEN '02' THEN 'ATIVA'
        WHEN '03' THEN 'SUSPENSA'
        WHEN '04' THEN 'INAPTA'
        WHEN '08' THEN 'BAIXADA'
        ELSE 'OUTROS'
    END AS SITUACAO_CADASTRAL,
    
    CAST(
        TRY_CAST(
            REPLACE(REPLACE(em.CAPITAL_SOCIAL_DA_EMPRESA, '.', ''), ',', '.') AS DOUBLE
        ) AS BIGINT
    ) AS CAPITAL_SOCIAL_DA_EMPRESA,
    
    CASE em.PORTE_DA_EMPRESA
        WHEN '00' THEN 'NÃO INFORMADO'
        WHEN '01' THEN 'MICRO EMPRESA'
        WHEN '03' THEN 'EMPRESA DE PEQUENO PORTE'
        WHEN '05' THEN 'DEMAIS'
        ELSE 'OUTROS'
    END AS PORTE_DA_EMPRESA,
    
    em.ENTE_FEDERATIVO_RESPONSAVEL,
    e.PAIS,
    e.NOME_DA_CIDADE_NO_EXTERIOR,
    e.DATA_DE_INICIO_ATIVIDADE,
    e.CNAE_FISCAL_PRINCIPAL,
    cnae.DESCRICAO_CNAE,
    
    CASE 
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 01 AND 03 THEN 'AGRICULTURA, PECUÁRIA, PRODUÇÃO FLORESTAL, PESCA E AQÜICULTURA'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 05 AND 09 THEN 'INDÚSTRIAS EXTRATIVAS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 10 AND 33 THEN 'INDÚSTRIAS DE TRANSFORMAÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 35 THEN 'ELETRICIDADE E GÁS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 36 AND 39 THEN 'ÁGUA, ESGOTO, ATIVIDADES DE GESTÃO DE RESÍDUOS E DESCONTAMINAÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 41 AND 43 THEN 'CONSTRUÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 45 AND 47 THEN 'COMÉRCIO; REPARAÇÃO DE VEÍCULOS AUTOMOTORES E MOTOCICLETAS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 49 AND 53 THEN 'TRANSPORTE, ARMAZENAGEM E CORREIO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 55 AND 56 THEN 'ALOJAMENTO E ALIMENTAÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 58 AND 63 THEN 'INFORMAÇÃO E COMUNICAÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 64 AND 66 THEN 'ATIVIDADES FINANCEIRAS, DE SEGUROS E SERVIÇOS RELACIONADOS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 68 THEN 'ATIVIDADES IMOBILIÁRIAS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 69 AND 75 THEN 'ATIVIDADES PROFISSIONAIS, CIENTÍFICAS E TÉCNICAS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 77 AND 82 THEN 'ATIVIDADES ADMINISTRATIVAS E SERVIÇOS COMPLEMENTARES'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 84 THEN 'ADMINISTRAÇÃO PÚBLICA, DEFESA E SEGURIDADE SOCIAL'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 85 THEN 'EDUCAÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 86 AND 88 THEN 'SAÚDE HUMANA E SERVIÇOS SOCIAIS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 90 AND 93 THEN 'ARTES, CULTURA, ESPORTE E RECREAÇÃO'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 94 AND 96 THEN 'OUTRAS ATIVIDADES DE SERVIÇOS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 97 THEN 'SERVIÇOS DOMÉSTICOS'
        WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 99 THEN 'ORGANISMOS INTERNACIONAIS E OUTRAS INSTITUIÇÕES EXTRATERRITORIAIS'
        ELSE 'OUTROS'
    END AS SECAO_CNAE,
    
    e.TIPO_DE_LOGRADOURO,
    e.LOGRADOURO,
    e.NUMERO,
    e.COMPLEMENTO,
    e.BAIRRO,
    e.CEP,
    e.UF,
    munic.DESCRICAO_MUNICIPIO,
    e.DDD_1 || e.TELEFONE_1 AS DDD_TELEFONE_1,
    e.DDD_2 || e.TELEFONE_2 AS DDD_TELEFONE_2
FROM ESTABELE e
LEFT JOIN EMPRE em  ON e.CNPJ_BASICO = em.CNPJ_BASICO
LEFT JOIN MUNIC     ON e.MUNICIPIO = MUNIC.CODIGO
LEFT JOIN NATJU     ON em.NATUREZA_JURIDICA = NATJU.CODIGO
LEFT JOIN CNAE      ON e.CNAE_FISCAL_PRINCIPAL = CNAE.CODIGO
LIMIT 0;
""")

# Pega min e max do CNPJ_BASICO
min_cnpj = con.execute("SELECT MIN(CNPJ_BASICO) FROM ESTABELE").fetchone()[0]
max_cnpj = con.execute("SELECT MAX(CNPJ_BASICO) FROM ESTABELE").fetchone()[0]

print(f"Intervalo CNPJ_BASICO: {min_cnpj} até {max_cnpj}")

# Convertendo para int, assumindo que CNPJ_BASICO são strings numéricas
min_cnpj_int = int(min_cnpj)
max_cnpj_int = int(max_cnpj)

start = min_cnpj_int
end = start + chunk_size
total_inserted = 0

while start <= max_cnpj_int:
    print(f"  ➜ Processando CNPJ_BASICO de {start} até {end}...")

    query_chunk = f"""
        INSERT INTO CNPJ_EMPRESAS
        SELECT
            e.CNPJ_BASICO || e.CNPJ_ORDEM || e.CNPJ_DV AS CNPJ,
            e.CNPJ_BASICO,
            e.CNPJ_ORDEM,
            e.CNPJ_DV,
            e.NOME_FANTASIA,
            em.RAZAO_SOCIAL_NOME_EMPRESARIAL,
            natju.DESCRICAO_NATUREZA_JURIDICA,

            CASE e.SITUACAO_CADASTRAL
                WHEN '01' THEN 'NULA'
                WHEN '02' THEN 'ATIVA'
                WHEN '03' THEN 'SUSPENSA'
                WHEN '04' THEN 'INAPTA'
                WHEN '08' THEN 'BAIXADA'
                ELSE 'OUTROS'
            END AS SITUACAO_CADASTRAL,

            CAST(
                TRY_CAST(
                    REPLACE(REPLACE(em.CAPITAL_SOCIAL_DA_EMPRESA, '.', ''), ',', '.') AS DOUBLE
                ) AS BIGINT
            ) AS CAPITAL_SOCIAL_DA_EMPRESA,

            CASE em.PORTE_DA_EMPRESA
                WHEN '00' THEN 'NÃO INFORMADO'
                WHEN '01' THEN 'MICRO EMPRESA'
                WHEN '03' THEN 'EMPRESA DE PEQUENO PORTE'
                WHEN '05' THEN 'DEMAIS'
                ELSE 'OUTROS'
            END AS PORTE_DA_EMPRESA,

            em.ENTE_FEDERATIVO_RESPONSAVEL,
            e.PAIS,
            e.NOME_DA_CIDADE_NO_EXTERIOR,
            e.DATA_DE_INICIO_ATIVIDADE,
            e.CNAE_FISCAL_PRINCIPAL,
            cnae.DESCRICAO_CNAE,

            CASE 
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 1 AND 3 THEN 'AGRICULTURA, PECUÁRIA, PRODUÇÃO FLORESTAL, PESCA E AQÜICULTURA'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 5 AND 9 THEN 'INDÚSTRIAS EXTRATIVAS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 10 AND 33 THEN 'INDÚSTRIAS DE TRANSFORMAÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 35 THEN 'ELETRICIDADE E GÁS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 36 AND 39 THEN 'ÁGUA, ESGOTO, ATIVIDADES DE GESTÃO DE RESÍDUOS E DESCONTAMINAÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 41 AND 43 THEN 'CONSTRUÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 45 AND 47 THEN 'COMÉRCIO; REPARAÇÃO DE VEÍCULOS AUTOMOTORES E MOTOCICLETAS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 49 AND 53 THEN 'TRANSPORTE, ARMAZENAGEM E CORREIO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 55 AND 56 THEN 'ALOJAMENTO E ALIMENTAÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 58 AND 63 THEN 'INFORMAÇÃO E COMUNICAÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 64 AND 66 THEN 'ATIVIDADES FINANCEIRAS, DE SEGUROS E SERVIÇOS RELACIONADOS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 68 THEN 'ATIVIDADES IMOBILIÁRIAS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 69 AND 75 THEN 'ATIVIDADES PROFISSIONAIS, CIENTÍFICAS E TÉCNICAS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 77 AND 82 THEN 'ATIVIDADES ADMINISTRATIVAS E SERVIÇOS COMPLEMENTARES'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 84 THEN 'ADMINISTRAÇÃO PÚBLICA, DEFESA E SEGURIDADE SOCIAL'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 85 THEN 'EDUCAÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 86 AND 88 THEN 'SAÚDE HUMANA E SERVIÇOS SOCIAIS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 90 AND 93 THEN 'ARTES, CULTURA, ESPORTE E RECREAÇÃO'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) BETWEEN 94 AND 96 THEN 'OUTRAS ATIVIDADES DE SERVIÇOS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 97 THEN 'SERVIÇOS DOMÉSTICOS'
                WHEN CAST(SUBSTR(CNAE_FISCAL_PRINCIPAL, 1, 2) AS INTEGER) = 99 THEN 'ORGANISMOS INTERNACIONAIS E OUTRAS INSTITUIÇÕES EXTRATERRITORIAIS'
                ELSE 'OUTROS'
            END AS SECAO_CNAE,

            e.TIPO_DE_LOGRADOURO,
            e.LOGRADOURO,
            e.NUMERO,
            e.COMPLEMENTO,
            e.BAIRRO,
            e.CEP,
            e.UF,
            munic.DESCRICAO_MUNICIPIO,
            e.DDD_1 || e.TELEFONE_1 AS DDD_TELEFONE_1,
            e.DDD_2 || e.TELEFONE_2 AS DDD_TELEFONE_2
        FROM ESTABELE e
        LEFT JOIN EMPRE em  ON e.CNPJ_BASICO = em.CNPJ_BASICO
        LEFT JOIN MUNIC     ON e.MUNICIPIO = MUNIC.CODIGO
        LEFT JOIN NATJU     ON em.NATUREZA_JURIDICA = NATJU.CODIGO
        LEFT JOIN CNAE      ON e.CNAE_FISCAL_PRINCIPAL = CNAE.CODIGO
        WHERE CAST(e.CNPJ_BASICO AS INTEGER) BETWEEN {start} AND {end}
    """

    con.execute(query_chunk)

    # Contar linhas inseridas nesse chunk (opcional)
    rows_inserted = con.execute("SELECT COUNT(*) FROM CNPJ_EMPRESAS").fetchone()[0]
    print(f"    → Total acumulado na tabela: {rows_inserted:,}")

    total_inserted = rows_inserted
    start = end + 1
    end = start + chunk_size

print(f"✅ Processamento finalizado! Total linhas: {total_inserted:,}")

con.close()
